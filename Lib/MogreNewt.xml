<?xml version="1.0"?>
<doc>
  <assembly>
    <name>MogreNewt</name>
  </assembly>
  <members>
    <member name="T:MogreNewt.ContactJoint">
      <summary>with this class you can iterate through all contacts </summary>
    </member>
    <member name="P:MogreNewt.ContactJoint.Body1">
      <summary>get the second body </summary>
    </member>
    <member name="P:MogreNewt.ContactJoint.Body0">
      <summary>get the first body </summary>
    </member>
    <member name="T:MogreNewt.Debugger">
      <summary>For viewing the Newton rigid bodies visually. </summary>
    </member>
    <member name="M:MogreNewt.Debugger.Init(Mogre.SceneManager)">
      <summary>init the debugger. </summary>
    </member>
    <member name="M:MogreNewt.Debugger.DeInit">
      <summary>de-init the debugger (cleantup) </summary>
    </member>
    <member name="M:MogreNewt.Debugger.NodeDestroyed(Mogre.Node)">
      <summary>called when one of the nodes used in this class are destroyed </summary>
    </member>
    <member name="M:MogreNewt.Debugger.ShowDebugInformation(System.Boolean,System.Boolean)">
      <summary>show the newton world </summary>
    </member>
    <member name="M:MogreNewt.Debugger.ShowDebugInformation(System.Boolean)">
      <summary>show the newton world </summary>
    </member>
    <member name="M:MogreNewt.Debugger.ShowDebugInformation">
      <summary>show the newton world </summary>
    </member>
    <member name="M:MogreNewt.Debugger.HideDebugInformation">
      <summary>remove lines and text drawn </summary>
    </member>
    <member name="M:MogreNewt.Debugger.SetMaterialColor(MogreNewt.MaterialID,Mogre.ColourValue)">
      <summary>set Material color </summary>
    </member>
    <member name="M:MogreNewt.Debugger.StartRaycastRecording(System.Boolean)">
      <summary>enable additional raycast-debugging (this also enables displaying of recorded raycasts!) </summary>
    </member>
    <member name="M:MogreNewt.Debugger.ClearRaycastsRecorded">
      <summary>clears all raycasts, that are currently shown, should probably be done once per frame! </summary>
    </member>
    <member name="M:MogreNewt.Debugger.StopRaycastRecording">
      <summary>disables raycast-debugging </summary>
    </member>
    <member name="M:MogreNewt.Debugger.SetRaycastRecordingColor(Mogre.ColourValue,Mogre.ColourValue,Mogre.ColourValue,Mogre.ColourValue)">
      <summary>set the color of the raycast-debug-lines </summary>
    </member>
    <member name="M:MogreNewt.Debugger.AddRay(Mogre.Vector3,Mogre.Vector3)">
      <summary>this function is used internally </summary>
    </member>
    <member name="M:MogreNewt.Debugger.AddConvexRay(MogreNewt.Collision,Mogre.Vector3,Mogre.Quaternion,Mogre.Vector3)">
      <summary>this function is used internally </summary>
    </member>
    <member name="M:MogreNewt.Debugger.AddDiscardedBody(MogreNewt.Body)">
      <summary>this function is used internally </summary>
    </member>
    <member name="M:MogreNewt.Debugger.AddHitBody(MogreNewt.Body)">
      <summary>this function is used internally </summary>
    </member>
    <member name="M:MogreNewt.Debugger.#ctor(MogreNewt.World)">
      <summary>this function must only be used by an instance of the OgreNewt::World class </summary>
    </member>
    <member name="P:MogreNewt.Debugger.IsRaycastRecordingHitBodies">
      <summary>Sets/returns true, if hit bodies are currently recording </summary>
    </member>
    <member name="P:MogreNewt.Debugger.IsRaycastRecording">
      <summary>Sets/returns true, if currently recording raycasts </summary>
    </member>
    <member name="T:MogreNewt.World">
      <summary>represents a physics world. </summary>
    </member>
    <member name="M:MogreNewt.World.Update(System.Single)">
      <summary>update the world by the specified time_step. </summary>
    </member>
    <member name="M:MogreNewt.World.InvalidateCache">
      <summary>invalidate internal cache </summary>
    </member>
    <member name="M:MogreNewt.World.DestroyAllBodies">
      <summary>remove all bodies from the world. </summary>
    </member>
    <member name="M:MogreNewt.World.SetSolverModel(MogreNewt.World+SolverModelMode)">
      <summary>set the physics solver model </summary>
    </member>
    <member name="M:MogreNewt.World.SetFrictionModel(MogreNewt.World+FrictionModelMode)">
      <summary>set the physics friction model </summary>
    </member>
    <member name="M:MogreNewt.World.SetPlatformArchitecture(MogreNewt.World+PlatformArchitecture)">
      <summary>specify a specific architecture to use for physics calculations. </summary>
    </member>
    <member name="M:MogreNewt.World.GetPlatformArchitecture(System.String&amp;)">
      <summary>get the architecture used for physics calculations. </summary>
    </member>
    <member name="M:MogreNewt.World.GetBodyCount">
      <summary>get the number of bodies in the simulation. </summary>
    </member>
    <member name="M:MogreNewt.World.GetConstraintCount">
      <summary>get the number of constaints in the simulation </summary>
    </member>
    <member name="M:MogreNewt.World.SetMultithreadSolverOnSingleIsland(System.Int32)">
      <summary>multithread settings </summary>
    </member>
    <member name="M:MogreNewt.World.GetMultithreadSolverOnSingleIsland">
      <summary>get multithread settings </summary>
    </member>
    <member name="M:MogreNewt.World.SetThreadCount(System.Int32)">
      <summary>set the number of threads for the physics simulation to use, don't do this while world update </summary>
    </member>
    <member name="M:MogreNewt.World.GetThreadCount">
      <summary>get the number of threads the simulation is using. </summary>
    </member>
    <member name="M:MogreNewt.World.CriticalSectionLock">
      <summary>notify an entrance to a critical section of code. </summary>
    </member>
    <member name="M:MogreNewt.World.SetMinimumFrameRate(System.Single)">
      <summary>set minimum framerate </summary>
    </member>
    <member name="M:MogreNewt.World.SetWorldSize(Mogre.AxisAlignedBox)">
      <summary />
      <param name="box">bos describing the size of the world. </param>
    </member>
    <member name="M:MogreNewt.World.SetWorldSize(Mogre.Vector3,Mogre.Vector3)">
      <summary>set the newton world size </summary>
    </member>
    <member name="M:MogreNewt.World.CollisionUpdate">
      <summary>updates only the collision of the world and call the callback functions if necessary, can be used for an collision only system </summary>
    </member>
    <member name="M:MogreNewt.World.AddBodyUpdateNodeRequest(System.Int32,MogreNewt.Body)">
      <summary>adds an update request for the body, this means that after the next world update the function body-&gt;updateNode will be called, if the bodie needs updating </summary>
    </member>
    <member name="M:MogreNewt.World.#ctor">
      <summary>Standard Constructor, creates the world. </summary>
    </member>
    <member name="P:MogreNewt.World.Version">
      <summary>get the Newton SDK version. </summary>
    </member>
    <member name="P:MogreNewt.World.WorldSize">
      <summary>get the world limits. </summary>
    </member>
    <member name="P:MogreNewt.World.DefaultMaterialID">
      <summary>get the default materialID object. </summary>
    </member>
    <member name="P:MogreNewt.World.NewtonWorld">
      <summary>retrieves a pointer to the NewtonWorld </summary>
    </member>
    <member name="T:MogreNewt.World+SolverModelMode">
      <summary>physics solver mode. </summary>
    </member>
    <member name="F:MogreNewt.World+SolverModelMode.SM_EXACT">
      <summary>the most accurate simulation. </summary>
    </member>
    <member name="F:MogreNewt.World+SolverModelMode.SM_ADAPTIVE">
      <summary>still accurate, but faster. </summary>
    </member>
    <member name="T:MogreNewt.World+FrictionModelMode">
      <summary>friction solver mode. </summary>
    </member>
    <member name="F:MogreNewt.World+FrictionModelMode.FM_EXACT">
      <summary>exact friction model (default). </summary>
    </member>
    <member name="F:MogreNewt.World+FrictionModelMode.FM_ADAPTIVE">
      <summary>adaptive friction mode. (faster but less accurate) </summary>
    </member>
    <member name="T:MogreNewt.MaterialID">
      <summary>represents a material </summary>
    </member>
    <member name="M:MogreNewt.MaterialID.#ctor(MogreNewt.World,System.Int32)">
      <summary>Overloaded constructor, sets the internal ID manually. should not be used by the end-user. </summary>
    </member>
    <member name="M:MogreNewt.MaterialID.#ctor(MogreNewt.World)">
      <summary>constructor </summary>
    </member>
    <member name="T:MogreNewt.CollisionSerializer">
      <summary>This class can be used to (de)serialize a Collision. Pre-building a Collision and serializing from a tool, then deserializing it at runtime may be more efficient than building the Collision on the fly, especially for complex objects. </summary>
    </member>
    <member name="M:MogreNewt.CollisionSerializer.ExportCollision(MogreNewt.Collision,System.IO.Stream)">
      <summary>Serialize the Collision to a file with the given name. </summary>
    </member>
    <member name="M:MogreNewt.CollisionSerializer.ImportCollision(System.Byte[],MogreNewt.Collision)">
      <summary>Deserialize the Collision from a DataStream. this will create a NEW Collision object </summary>
    </member>
    <member name="M:MogreNewt.CollisionSerializer.ImportCollision(System.IO.Stream,MogreNewt.Collision)">
      <summary>Deserialize the Collision from a DataStream. this will create a NEW Collision object </summary>
    </member>
    <member name="M:MogreNewt.CollisionSerializer.#ctor">
      <summary>constructor </summary>
    </member>
    <member name="T:MogreNewt.Collision">
      <summary>represents a shape for collision detection </summary>
    </member>
    <member name="M:MogreNewt.Collision.MakeUnique">
      <summary>make unique </summary>
    </member>
    <member name="M:MogreNewt.Collision.GetAABB(Mogre.Vector3)">
      <summary>get the Axis-Aligned Bounding Box for this collision shape. </summary>
    </member>
    <member name="M:MogreNewt.Collision.GetAABB(Mogre.Quaternion)">
      <summary>get the Axis-Aligned Bounding Box for this collision shape. </summary>
    </member>
    <member name="M:MogreNewt.Collision.GetAABB(Mogre.Quaternion,Mogre.Vector3)">
      <summary>get the Axis-Aligned Bounding Box for this collision shape. </summary>
    </member>
    <member name="M:MogreNewt.Collision.GetCollisionPrimitiveType(MogreNewt.Collision)">
      <summary>Returns the Collisiontype for the given Newton-Collision. </summary>
    </member>
    <member name="M:MogreNewt.Collision.#ctor(MogreNewt.World)">
      <summary>constructor </summary>
    </member>
    <member name="P:MogreNewt.Collision.CollisionPrimitiveType">
      <summary>Returns the Collisiontype for this Collision. </summary>
    </member>
    <member name="P:MogreNewt.Collision.AABB">
      <summary>get the Axis-Aligned Bounding Box for this collision shape. </summary>
    </member>
    <member name="P:MogreNewt.Collision.UserID">
      <summary>Sets/get user ID, for collision callback identification </summary>
    </member>
    <member name="P:MogreNewt.Collision.World">
      <summary>Returns the Newton world this collision belongs to. </summary>
    </member>
    <member name="P:MogreNewt.Collision.NewtonCollision">
      <summary>retrieve the Newton pointer </summary>
    </member>
    <member name="T:MogreNewt.ConvexCollision">
      <summary>represents a collision shape that is explicitly convex. </summary>
    </member>
    <member name="M:MogreNewt.ConvexCollision.CalculateVolume">
      <summary>calculate the volume of the collision shape, useful for buoyancy calculations. </summary>
    </member>
    <member name="M:MogreNewt.ConvexCollision.CalculateInertialMatrix(Mogre.Vector3&amp;,Mogre.Vector3&amp;)">
      <summary>calculate the moment of inertia for this collision primitive, along with the theoretical center-of-mass for this shape. </summary>
    </member>
    <member name="M:MogreNewt.ConvexCollision.#ctor(MogreNewt.World)">
      <summary>constructor </summary>
    </member>
    <member name="P:MogreNewt.ConvexCollision.IsTriggerVolume">
      <summary>Sets/returns true, if the collision is a trigger-volume </summary>
    </member>
    <member name="T:MogreNewt.ConvexModifierCollision">
      <summary>represents a scalable collision shape. </summary>
    </member>
    <member name="M:MogreNewt.ConvexModifierCollision.#ctor(MogreNewt.World,MogreNewt.Collision,System.Int32)">
      <summary>constructor </summary>
    </member>
    <member name="P:MogreNewt.ConvexModifierCollision.ScalarMatrix">
      <summary>Sets/get the scalar matrix for the collision </summary>
    </member>
    <member name="T:MogreNewt.Body">
      <summary>main class for all Rigid Bodies in the system. </summary>
    </member>
    <member name="M:MogreNewt.Body.AttachNode(Mogre.Node)">
      <summary>attach this body to an Ogre::Node* </summary>
    </member>
    <member name="M:MogreNewt.Body.SetPositionOrientation(Mogre.Vector3,Mogre.Quaternion)">
      <summary>position and orient the body arbitrarily. </summary>
    </member>
    <member name="M:MogreNewt.Body.SetMassMatrix(System.Single,Mogre.Vector3)">
      <summary>set the mass and inertia for the body. </summary>
    </member>
    <member name="M:MogreNewt.Body.GetPositionOrientation(Mogre.Vector3&amp;,Mogre.Quaternion&amp;)">
      <summary>get position and orientation in form of an Ogre::Vector(position) and Ogre::Quaternion(orientation) </summary>
    </member>
    <member name="M:MogreNewt.Body.GetMassMatrix(System.Single&amp;,Mogre.Vector3&amp;)">
      <summary>get Ogre::Real(mass) and Ogre::Vector3(inertia) of the body. </summary>
    </member>
    <member name="M:MogreNewt.Body.GetInvMass(System.Single&amp;,Mogre.Vector3&amp;)">
      <summary>get invert mass + inertia for the body. </summary>
    </member>
    <member name="M:MogreNewt.Body.AddImpulse(Mogre.Vector3,Mogre.Vector3)">
      <summary>get the freeze threshold </summary>
    </member>
    <member name="M:MogreNewt.Body.AddForce(Mogre.Vector3)">
      <summary>add force to the body. </summary>
    </member>
    <member name="M:MogreNewt.Body.AddTorque(Mogre.Vector3)">
      <summary>add torque to the body. </summary>
    </member>
    <member name="M:MogreNewt.Body.CalculateInverseDynamicsForce(System.Single,Mogre.Vector3)">
      <summary>calculate force needed for given velocity </summary>
    </member>
    <member name="M:MogreNewt.Body.SetForce(Mogre.Vector3)">
      <summary>set the force for a body. </summary>
    </member>
    <member name="M:MogreNewt.Body.SetTorque(Mogre.Vector3)">
      <summary>set the torque for a body. </summary>
    </member>
    <member name="M:MogreNewt.Body.AddBouyancyForce(System.Single,System.Single,System.Single,Mogre.Vector3,MogreNewt.BuoyancyPlaneCallbackHandler)">
      <summary>apply a buoyancy force to the body. </summary>
    </member>
    <member name="M:MogreNewt.Body.AddGlobalForce(Mogre.Vector3,Mogre.Vector3)">
      <summary>helper function that adds a force (and resulting torque) to an object in global cordinates. </summary>
    </member>
    <member name="M:MogreNewt.Body.AddLocalForce(Mogre.Vector3,Mogre.Vector3)">
      <summary>this function is only valid inside a ForceCallback function! </summary>
      <param name="force">vector representing force, in local space of the body </param>
      <param name="pos">vector representing locatino of force, in local space of the body </param>
    </member>
    <member name="M:MogreNewt.Body.RequestNodeUpdate(System.Int32,System.Boolean)">
      <summary>Call this to signify that the position/orientation of the attached node needs to be updated. </summary>
    </member>
    <member name="M:MogreNewt.Body.UpdateNode">
      <summary>update the position of the node (if attached) and sets m_nodeupdateneeded to false </summary>
    </member>
    <member name="M:MogreNewt.Body.#ctor(MogreNewt.World,MogreNewt.Collision,System.Int32,System.Boolean)">
      <summary>constructor. </summary>
    </member>
    <member name="M:MogreNewt.Body.#ctor(MogreNewt.World,MogreNewt.Collision,System.Int32)">
      <summary>constructor. </summary>
    </member>
    <member name="M:MogreNewt.Body.#ctor(MogreNewt.World,MogreNewt.Collision,System.Boolean)">
      <summary>constructor. </summary>
    </member>
    <member name="M:MogreNewt.Body.#ctor(MogreNewt.World,MogreNewt.Collision)">
      <summary>constructor. </summary>
    </member>
    <member name="P:MogreNewt.Body.IsNodeUpdateNeeded">
      <summary>Return if an node update was requested. </summary>
    </member>
    <member name="P:MogreNewt.Body.TorqueAcceleration">
      <summary>get the rotational acceleration due to torque acting on the body. </summary>
    </member>
    <member name="P:MogreNewt.Body.ForceAcceleration">
      <summary>get the linear acceleration due to forces acting on the body. </summary>
    </member>
    <member name="P:MogreNewt.Body.IsFreezed">
      <summary>Sets/is the body freezed? </summary>
    </member>
    <member name="P:MogreNewt.Body.AutoSleep">
      <summary>Sets/get whether the body should "sleep" when equilibrium is reached. </summary>
    </member>
    <member name="P:MogreNewt.Body.Collision">
      <summary>Sets/set the factors that cause a body to "freeze" when equilibrium reached. </summary>
    </member>
    <member name="P:MogreNewt.Body.AngularDamping">
      <summary>Sets/get angular damping </summary>
    </member>
    <member name="P:MogreNewt.Body.LinearDamping">
      <summary>Sets/get linear damping </summary>
    </member>
    <member name="P:MogreNewt.Body.Torque">
      <summary>Sets/get the torque acting on the body. </summary>
    </member>
    <member name="P:MogreNewt.Body.Force">
      <summary>Sets/get the force acting on the body. </summary>
    </member>
    <member name="P:MogreNewt.Body.Velocity">
      <summary>Sets/get velocity of the body. in global coordinates. </summary>
    </member>
    <member name="P:MogreNewt.Body.Omega">
      <summary>Sets/get omega of the body. in global space. </summary>
    </member>
    <member name="P:MogreNewt.Body.JointRecursiveCollision">
      <summary>Sets/returns current setting for this body. </summary>
    </member>
    <member name="P:MogreNewt.Body.ContinuousCollisionMode">
      <summary>Sets/returns current setting for this body. </summary>
    </member>
    <member name="P:MogreNewt.Body.MaterialGroupID">
      <summary>Sets/get a pointer to the Material assigned to this body. </summary>
    </member>
    <member name="P:MogreNewt.Body.CenterOfMass">
      <summary>Sets/get the center of mass. </summary>
    </member>
    <member name="P:MogreNewt.Body.Type">
      <summary>Sets/get the type set for this body. </summary>
    </member>
    <member name="P:MogreNewt.Body.World">
      <summary>get a pointer to the OgreNewt::World this body belongs to. </summary>
    </member>
    <member name="P:MogreNewt.Body.OgreNode">
      <summary>get a pointer to the attached Node. </summary>
    </member>
    <member name="P:MogreNewt.Body.NewtonBody">
      <summary>get a pointer to the NewtonBody object </summary>
    </member>
    <member name="P:MogreNewt.Body.UserData">
      <summary>Sets/retrieve pointer to previously set user data. </summary>
    </member>
    <member name="T:MogreNewt.Joint">
      <summary>base class for all joints. </summary>
    </member>
    <member name="M:MogreNewt.Joint.#ctor">
      <summary>constructor </summary>
    </member>
    <member name="P:MogreNewt.Joint.UserData">
      <summary>Sets/get user data for this joint </summary>
    </member>
    <member name="P:MogreNewt.Joint.Stiffness">
      <summary>Sets/get joint stiffness </summary>
    </member>
    <member name="P:MogreNewt.Joint.CollisionState">
      <summary>Sets/returns collision state </summary>
    </member>
    <member name="T:MogreNewt.CustomJoint">
      <summary>CustomJoint. </summary>
    </member>
    <member name="M:MogreNewt.CustomJoint.SubmitConstraint(System.Single,System.Int32)">
      <summary>must be over-written for a functioning joint. </summary>
    </member>
    <member name="M:MogreNewt.CustomJoint.pinAndDirToLocal(Mogre.Vector3,Mogre.Vector3,Mogre.Quaternion&amp;,Mogre.Vector3&amp;,Mogre.Quaternion&amp;,Mogre.Vector3&amp;)">
      <summary>find the local orientation and position of the joint with regards to the 2 bodies in the joint. </summary>
    </member>
    <member name="M:MogreNewt.CustomJoint.localToGlobal(Mogre.Quaternion,Mogre.Vector3,Mogre.Quaternion&amp;,Mogre.Vector3&amp;)">
      <summary>find the global orientation and position of the joint with regards to the a body in the joint. </summary>
    </member>
    <member name="M:MogreNewt.CustomJoint.localToGlobal(Mogre.Quaternion,Mogre.Vector3,Mogre.Quaternion&amp;,Mogre.Vector3&amp;,System.Int32)">
      <summary>find the global orientation and position of the joint with regards to the a body in the joint. </summary>
    </member>
    <member name="M:MogreNewt.CustomJoint.addLinearRow(Mogre.Vector3,Mogre.Vector3,Mogre.Vector3)">
      <summary>add a linear row to the constraint. </summary>
    </member>
    <member name="M:MogreNewt.CustomJoint.addAngularRow(Mogre.Radian,Mogre.Vector3)">
      <summary>add an angular row to the constraint. </summary>
    </member>
    <member name="M:MogreNewt.CustomJoint.addGeneralRow(Mogre.Vector3,Mogre.Vector3,Mogre.Vector3,Mogre.Vector3)">
      <summary>set the general jacobian rows directly. </summary>
    </member>
    <member name="M:MogreNewt.CustomJoint.setRowMinimumFriction(System.Single)">
      <summary>set row minimum friction </summary>
    </member>
    <member name="M:MogreNewt.CustomJoint.setRowMaximumFriction(System.Single)">
      <summary>set row maximum friction </summary>
    </member>
    <member name="M:MogreNewt.CustomJoint.setRowAcceleration(System.Single)">
      <summary>set row acceleration </summary>
    </member>
    <member name="M:MogreNewt.CustomJoint.setRowStiffness(System.Single)">
      <summary>set row stiffness </summary>
    </member>
    <member name="M:MogreNewt.CustomJoint.setRowSpringDamper(System.Single,System.Single)">
      <summary>apply a spring to this row, allowing for joints with spring behaviour in 1 or more DoF's </summary>
    </member>
    <member name="M:MogreNewt.CustomJoint.getRowForce(System.Int32)">
      <summary>retrieve the force acting on the current row. </summary>
    </member>
    <member name="M:MogreNewt.CustomJoint.grammSchmidt(Mogre.Vector3)">
      <summary>pin vector to arbitrary quaternion utility function. </summary>
    </member>
    <member name="M:MogreNewt.CustomJoint.#ctor(System.UInt32,MogreNewt.Body,MogreNewt.Body)">
      <summary>constructor </summary>
    </member>
    <member name="T:MogreNewt.BasicJoints.BallAndSocket">
      <summary>Ball and Socket joint. </summary>
    </member>
    <member name="M:MogreNewt.BasicJoints.BallAndSocket.SetLimits(Mogre.Vector3,Mogre.Radian,Mogre.Radian)">
      <summary>set limits for the joints rotation </summary>
    </member>
    <member name="M:MogreNewt.BasicJoints.BallAndSocket.#ctor(MogreNewt.World,MogreNewt.Body,MogreNewt.Body,Mogre.Vector3)">
      <summary>constructor </summary>
    </member>
    <member name="P:MogreNewt.BasicJoints.BallAndSocket.JointForce">
      <summary>retrieve the current joint force. </summary>
    </member>
    <member name="P:MogreNewt.BasicJoints.BallAndSocket.JointOmega">
      <summary>retrieve the current joint omega </summary>
    </member>
    <member name="P:MogreNewt.BasicJoints.BallAndSocket.JointAngle">
      <summary>retrieve the current joint angle </summary>
    </member>
    <member name="T:MogreNewt.BasicJoints.Hinge">
      <summary>hinge joint. </summary>
    </member>
    <member name="M:MogreNewt.BasicJoints.Hinge.SetCallbackAccel(System.Single)">
      <summary>set acceleration around the joint pin </summary>
    </member>
    <member name="M:MogreNewt.BasicJoints.Hinge.SetCallbackFrictionMin(System.Single)">
      <summary>set minimum joint friction. </summary>
    </member>
    <member name="M:MogreNewt.BasicJoints.Hinge.SetCallbackFrictionMax(System.Single)">
      <summary>set maximum joint friction </summary>
    </member>
    <member name="M:MogreNewt.BasicJoints.Hinge.CalculateStopAlpha(Mogre.Radian)">
      <summary>calculate the acceleration neccesary to stop the joint at the specified angle. </summary>
    </member>
    <member name="M:MogreNewt.BasicJoints.Hinge.#ctor(MogreNewt.World,MogreNewt.Body,MogreNewt.Body,Mogre.Vector3,Mogre.Vector3)">
      <summary>constructor </summary>
    </member>
    <member name="P:MogreNewt.BasicJoints.Hinge.CallbackTimestep">
      <summary>get the current physics timestep. </summary>
    </member>
    <member name="P:MogreNewt.BasicJoints.Hinge.JointForce">
      <summary>get the force on the joint. </summary>
    </member>
    <member name="P:MogreNewt.BasicJoints.Hinge.JointOmega">
      <summary>retrieve the rotational velocity around the pin. </summary>
    </member>
    <member name="P:MogreNewt.BasicJoints.Hinge.JointAngle">
      <summary>retrieve the angle around the pin. </summary>
    </member>
    <member name="T:MogreNewt.BasicJoints.Slider">
      <summary>slider joint. </summary>
    </member>
    <member name="M:MogreNewt.BasicJoints.Slider.SetCallbackAccel(System.Single)">
      <summary>set the acceleration along the pin. </summary>
    </member>
    <member name="M:MogreNewt.BasicJoints.Slider.SetCallbackFrictionMin(System.Single)">
      <summary>set minimum friction for the joint </summary>
    </member>
    <member name="M:MogreNewt.BasicJoints.Slider.SetCallbackFrictionMax(System.Single)">
      <summary>set maximum friction for the joint. </summary>
    </member>
    <member name="M:MogreNewt.BasicJoints.Slider.CalculateStopAccel(System.Single)">
      <summary>calculate the acceleration neccesary to stop the joint at the specified distance. </summary>
    </member>
    <member name="M:MogreNewt.BasicJoints.Slider.#ctor(MogreNewt.World,MogreNewt.Body,MogreNewt.Body,Mogre.Vector3,Mogre.Vector3)">
      <summary>constructor </summary>
    </member>
    <member name="P:MogreNewt.BasicJoints.Slider.CallbackTimestep">
      <summary>get current physics timestep. </summary>
    </member>
    <member name="P:MogreNewt.BasicJoints.Slider.JointForce">
      <summary>get force on the joint. </summary>
    </member>
    <member name="P:MogreNewt.BasicJoints.Slider.JointVeloc">
      <summary>get rotational velocity along the pin </summary>
    </member>
    <member name="T:MogreNewt.BasicJoints.Universal">
      <summary>this class represents a Universal joint. </summary>
    </member>
    <member name="M:MogreNewt.BasicJoints.Universal.SetCallbackAccel(System.Single,System.UInt32)">
      <summary>set the acceleration around a particular pin. </summary>
    </member>
    <member name="M:MogreNewt.BasicJoints.Universal.SetCallbackFrictionMin(System.Single,System.UInt32)">
      <summary>set the minimum friction around a particular pin </summary>
    </member>
    <member name="M:MogreNewt.BasicJoints.Universal.SetCallbackFrictionMax(System.Single,System.UInt32)">
      <summary>set the maximum friction around a particular pin. </summary>
    </member>
    <member name="M:MogreNewt.BasicJoints.Universal.CalculateStopAlpha0(System.Single)">
      <summary>calculate the acceleration neccesary to stop the joint at the specified angle on pin 0. </summary>
    </member>
    <member name="M:MogreNewt.BasicJoints.Universal.CalculateStopAlpha1(System.Single)">
      <summary>calculate the acceleration neccesary to stop the joint at the specified angle on pin 1. </summary>
    </member>
    <member name="M:MogreNewt.BasicJoints.Universal.#ctor(MogreNewt.World,MogreNewt.Body,MogreNewt.Body,Mogre.Vector3,Mogre.Vector3,Mogre.Vector3)">
      <summary>constructor </summary>
    </member>
    <member name="P:MogreNewt.BasicJoints.Universal.CallbackTimestep">
      <summary>get the current phsics timestep. </summary>
    </member>
    <member name="P:MogreNewt.BasicJoints.Universal.JointForce">
      <summary>get the force on the joint. </summary>
    </member>
    <member name="P:MogreNewt.BasicJoints.Universal.JointOmega1">
      <summary>get the rotational velocity around pin1. </summary>
    </member>
    <member name="P:MogreNewt.BasicJoints.Universal.JointOmega0">
      <summary>get the rotational velocity around pin0. </summary>
    </member>
    <member name="P:MogreNewt.BasicJoints.Universal.JointAngle1">
      <summary>get the angle around pin1. </summary>
    </member>
    <member name="P:MogreNewt.BasicJoints.Universal.JointAngle0">
      <summary>get the angle around pin0. </summary>
    </member>
    <member name="T:MogreNewt.BasicJoints.UpVector">
      <summary>UpVector joint. </summary>
    </member>
    <member name="M:MogreNewt.BasicJoints.UpVector.#ctor(MogreNewt.World,MogreNewt.Body,Mogre.Vector3)">
      <summary>constructor </summary>
    </member>
    <member name="P:MogreNewt.BasicJoints.UpVector.Pin">
      <summary>Sets/get the current pin direction. </summary>
    </member>
    <member name="T:MogreNewt.PrebuiltCustomJoints.Custom2DJoint">
      <summary>Custom2DJoint class. </summary>
    </member>
    <member name="M:MogreNewt.PrebuiltCustomJoints.Custom2DJoint.SubmitConstraint(System.Single,System.Int32)">
      <summary>overloaded function that applies the actual constraint. </summary>
    </member>
    <member name="M:MogreNewt.PrebuiltCustomJoints.Custom2DJoint.SetLimits(Mogre.Degree,Mogre.Degree)">
      <summary>set rotational limits for the joint. </summary>
    </member>
    <member name="M:MogreNewt.PrebuiltCustomJoints.Custom2DJoint.AddAccel(System.Single)">
      <summary>adds rotational acceleration to the joint (like a motor) </summary>
    </member>
    <member name="M:MogreNewt.PrebuiltCustomJoints.Custom2DJoint.ResetAngle">
      <summary>resets the joint angle to 0. this simply sets the internal variable to zero. you might want to call this for example after resetting a body. </summary>
    </member>
    <member name="M:MogreNewt.PrebuiltCustomJoints.Custom2DJoint.#ctor(MogreNewt.Body,Mogre.Vector3)">
      <summary>constructor </summary>
    </member>
    <member name="P:MogreNewt.PrebuiltCustomJoints.Custom2DJoint.Pin">
      <summary>get the pin. </summary>
    </member>
    <member name="P:MogreNewt.PrebuiltCustomJoints.Custom2DJoint.LimitsOn">
      <summary>Sets/returns whether limits are turned on or off for the joint. </summary>
    </member>
    <member name="P:MogreNewt.PrebuiltCustomJoints.Custom2DJoint.Angle">
      <summary>get the current angle of the joint. </summary>
    </member>
    <member name="T:MogreNewt.PrebuiltCustomJoints.CustomRigidJoint">
      <summary>CustomFixedJoint. </summary>
    </member>
    <member name="M:MogreNewt.PrebuiltCustomJoints.CustomRigidJoint.SubmitConstraint(System.Single,System.Int32)">
      <summary>must be over-written for a functioning joint. </summary>
    </member>
    <member name="T:MogreNewt.BodyInAABBIterator">
      <summary>Iterate through all bodies in a specific AABB in the world. </summary>
    </member>
    <member name="M:MogreNewt.BodyInAABBIterator.Go(Mogre.AxisAlignedBox)">
      <summary>perform an iteration </summary>
    </member>
    <member name="T:MogreNewt.CollisionPrimitives.Null">
      <summary>null collision (results in no collision) </summary>
    </member>
    <member name="M:MogreNewt.CollisionPrimitives.Null.#ctor(MogreNewt.World)">
      <summary>constructor </summary>
    </member>
    <member name="T:MogreNewt.CollisionPrimitives.Box">
      <summary>standard primitive Box. </summary>
    </member>
    <member name="M:MogreNewt.CollisionPrimitives.Box.#ctor(MogreNewt.World,Mogre.Vector3,System.Int32)">
      <summary>constructor </summary>
    </member>
    <member name="M:MogreNewt.CollisionPrimitives.Box.#ctor(MogreNewt.World,Mogre.Vector3,Mogre.Vector3,System.Int32)">
      <summary>constructor </summary>
    </member>
    <member name="M:MogreNewt.CollisionPrimitives.Box.#ctor(MogreNewt.World,Mogre.Vector3,Mogre.Quaternion,System.Int32)">
      <summary>constructor </summary>
    </member>
    <member name="M:MogreNewt.CollisionPrimitives.Box.#ctor(MogreNewt.World,Mogre.Vector3,Mogre.Quaternion,Mogre.Vector3,System.Int32)">
      <summary>constructor </summary>
    </member>
    <member name="T:MogreNewt.CollisionPrimitives.Ellipsoid">
      <summary>standard primitive Ellipsoid. </summary>
    </member>
    <member name="M:MogreNewt.CollisionPrimitives.Ellipsoid.#ctor(MogreNewt.World,Mogre.Vector3,System.Int32)">
      <summary>constructor </summary>
    </member>
    <member name="M:MogreNewt.CollisionPrimitives.Ellipsoid.#ctor(MogreNewt.World,Mogre.Vector3,Mogre.Vector3,System.Int32)">
      <summary>constructor </summary>
    </member>
    <member name="M:MogreNewt.CollisionPrimitives.Ellipsoid.#ctor(MogreNewt.World,Mogre.Vector3,Mogre.Quaternion,System.Int32)">
      <summary>constructor </summary>
    </member>
    <member name="M:MogreNewt.CollisionPrimitives.Ellipsoid.#ctor(MogreNewt.World,Mogre.Vector3,Mogre.Quaternion,Mogre.Vector3,System.Int32)">
      <summary>constructor </summary>
    </member>
    <member name="T:MogreNewt.CollisionPrimitives.Cylinder">
      <summary>standard primitive cylinder. </summary>
    </member>
    <member name="M:MogreNewt.CollisionPrimitives.Cylinder.#ctor(MogreNewt.World,System.Single,System.Single,System.Int32)">
      <summary>constructor </summary>
    </member>
    <member name="M:MogreNewt.CollisionPrimitives.Cylinder.#ctor(MogreNewt.World,System.Single,System.Single,Mogre.Vector3,System.Int32)">
      <summary>constructor </summary>
    </member>
    <member name="M:MogreNewt.CollisionPrimitives.Cylinder.#ctor(MogreNewt.World,System.Single,System.Single,Mogre.Quaternion,System.Int32)">
      <summary>constructor </summary>
    </member>
    <member name="M:MogreNewt.CollisionPrimitives.Cylinder.#ctor(MogreNewt.World,System.Single,System.Single,Mogre.Quaternion,Mogre.Vector3,System.Int32)">
      <summary>constructor </summary>
    </member>
    <member name="T:MogreNewt.CollisionPrimitives.Capsule">
      <summary>standard primitive capsule. </summary>
    </member>
    <member name="M:MogreNewt.CollisionPrimitives.Capsule.#ctor(MogreNewt.World,System.Single,System.Single,System.Int32)">
      <summary>constructor </summary>
    </member>
    <member name="M:MogreNewt.CollisionPrimitives.Capsule.#ctor(MogreNewt.World,System.Single,System.Single,Mogre.Vector3,System.Int32)">
      <summary>constructor </summary>
    </member>
    <member name="M:MogreNewt.CollisionPrimitives.Capsule.#ctor(MogreNewt.World,System.Single,System.Single,Mogre.Quaternion,System.Int32)">
      <summary>constructor </summary>
    </member>
    <member name="M:MogreNewt.CollisionPrimitives.Capsule.#ctor(MogreNewt.World,System.Single,System.Single,Mogre.Quaternion,Mogre.Vector3,System.Int32)">
      <summary>constructor </summary>
    </member>
    <member name="T:MogreNewt.CollisionPrimitives.Cone">
      <summary>standard primitive cone. </summary>
    </member>
    <member name="M:MogreNewt.CollisionPrimitives.Cone.#ctor(MogreNewt.World,System.Single,System.Single,System.Int32)">
      <summary>constructor </summary>
    </member>
    <member name="M:MogreNewt.CollisionPrimitives.Cone.#ctor(MogreNewt.World,System.Single,System.Single,Mogre.Vector3,System.Int32)">
      <summary>constructor </summary>
    </member>
    <member name="M:MogreNewt.CollisionPrimitives.Cone.#ctor(MogreNewt.World,System.Single,System.Single,Mogre.Quaternion,System.Int32)">
      <summary>constructor </summary>
    </member>
    <member name="M:MogreNewt.CollisionPrimitives.Cone.#ctor(MogreNewt.World,System.Single,System.Single,Mogre.Quaternion,Mogre.Vector3,System.Int32)">
      <summary>constructor </summary>
    </member>
    <member name="T:MogreNewt.CollisionPrimitives.ChamferCylinder">
      <summary>filled-donut shape primitive. </summary>
    </member>
    <member name="M:MogreNewt.CollisionPrimitives.ChamferCylinder.#ctor(MogreNewt.World,System.Single,System.Single,System.Int32)">
      <summary>constructor </summary>
    </member>
    <member name="M:MogreNewt.CollisionPrimitives.ChamferCylinder.#ctor(MogreNewt.World,System.Single,System.Single,Mogre.Vector3,System.Int32)">
      <summary>constructor </summary>
    </member>
    <member name="M:MogreNewt.CollisionPrimitives.ChamferCylinder.#ctor(MogreNewt.World,System.Single,System.Single,Mogre.Quaternion,System.Int32)">
      <summary>constructor </summary>
    </member>
    <member name="M:MogreNewt.CollisionPrimitives.ChamferCylinder.#ctor(MogreNewt.World,System.Single,System.Single,Mogre.Quaternion,Mogre.Vector3,System.Int32)">
      <summary>constructor </summary>
    </member>
    <member name="T:MogreNewt.CollisionPrimitives.ConvexHull">
      <summary>ConvexHull primitive. </summary>
    </member>
    <member name="M:MogreNewt.CollisionPrimitives.ConvexHull.#ctor(MogreNewt.World,Mogre.Vector3[],System.Single,System.Int32)">
      <summary>Overloaded constructor. pass a pointer to an array of vertices and the hull will be made from that. </summary>
      <param name="world">pointer to the OgreNewt::World</param>
      <param name="verts">pointer to an array of Ogre::Vector3's that contain vertex position data </param>
      <param name="id">an id for this shape, can be received with collision-&gt;getUserId() </param>
      <param name="tolerance">a tolerance passed to newton </param>
    </member>
    <member name="M:MogreNewt.CollisionPrimitives.ConvexHull.#ctor(MogreNewt.World,Mogre.Vector3[],Mogre.Vector3,System.Single,System.Int32)">
      <summary>Overloaded constructor. pass a pointer to an array of vertices and the hull will be made from that. </summary>
      <param name="world">pointer to the OgreNewt::World</param>
      <param name="verts">pointer to an array of Ogre::Vector3's that contain vertex position data </param>
      <param name="id">an id for this shape, can be received with collision-&gt;getUserId() </param>
      <param name="pos">position offset of the primitive </param>
      <param name="tolerance">a tolerance passed to newton </param>
    </member>
    <member name="M:MogreNewt.CollisionPrimitives.ConvexHull.#ctor(MogreNewt.World,Mogre.Vector3[],Mogre.Quaternion,System.Single,System.Int32)">
      <summary>Overloaded constructor. pass a pointer to an array of vertices and the hull will be made from that. </summary>
      <param name="world">pointer to the OgreNewt::World</param>
      <param name="verts">pointer to an array of Ogre::Vector3's that contain vertex position data </param>
      <param name="id">an id for this shape, can be received with collision-&gt;getUserId() </param>
      <param name="orient">orientation offset of the primitive </param>
      <param name="tolerance">a tolerance passed to newton </param>
    </member>
    <member name="M:MogreNewt.CollisionPrimitives.ConvexHull.#ctor(MogreNewt.World,Mogre.Vector3[],Mogre.Quaternion,Mogre.Vector3,System.Single,System.Int32)">
      <summary>Overloaded constructor. pass a pointer to an array of vertices and the hull will be made from that. </summary>
      <param name="world">pointer to the OgreNewt::World</param>
      <param name="verts">pointer to an array of Ogre::Vector3's that contain vertex position data </param>
      <param name="id">an id for this shape, can be received with collision-&gt;getUserId() </param>
      <param name="orient">orientation offset of the primitive </param>
      <param name="pos">position offset of the primitive </param>
      <param name="tolerance">a tolerance passed to newton </param>
    </member>
    <member name="M:MogreNewt.CollisionPrimitives.ConvexHull.#ctor(MogreNewt.World,Mogre.SceneNode,System.Single,System.Int32)">
      <summary>Overloaded constructor. pass a pointer to an array of vertices and the hull will be made from that. </summary>
      <param name="world">pointer to the OgreNewt::World</param>
      <param name="id">an id for this shape, can be received with collision-&gt;getUserId() </param>
      <param name="tolerance">a tolerance passed to newton </param>
    </member>
    <member name="M:MogreNewt.CollisionPrimitives.ConvexHull.#ctor(MogreNewt.World,Mogre.SceneNode,Mogre.Vector3,System.Single,System.Int32)">
      <summary>constructor </summary>
    </member>
    <member name="M:MogreNewt.CollisionPrimitives.ConvexHull.#ctor(MogreNewt.World,Mogre.SceneNode,Mogre.Quaternion,System.Single,System.Int32)">
      <summary>constructor </summary>
    </member>
    <member name="M:MogreNewt.CollisionPrimitives.ConvexHull.#ctor(MogreNewt.World,Mogre.SceneNode,Mogre.Quaternion,Mogre.Vector3,System.Single,System.Int32)">
      <summary>constructor </summary>
    </member>
    <member name="T:MogreNewt.CollisionPrimitives.TreeCollision">
      <summary>TreeCollision - complex polygonal collision. </summary>
    </member>
    <member name="M:MogreNewt.CollisionPrimitives.TreeCollision.Start(System.Int32)">
      <summary>start a tree collision creation </summary>
    </member>
    <member name="M:MogreNewt.CollisionPrimitives.TreeCollision.AddPoly(Mogre.Vector3[],System.UInt32)">
      <summary>add a poly to the tree collision </summary>
    </member>
    <member name="M:MogreNewt.CollisionPrimitives.TreeCollision.Finish">
      <summary>finish the tree collision </summary>
    </member>
    <member name="M:MogreNewt.CollisionPrimitives.TreeCollision.Finish(System.Boolean)">
      <summary>finish the tree collision </summary>
    </member>
    <member name="M:MogreNewt.CollisionPrimitives.TreeCollision.#ctor(MogreNewt.World,Mogre.Vector3[],Mogre.IndexData,System.Boolean,System.Int32,MogreNewt.CollisionPrimitives.FaceWinding)">
      <summary>constructor </summary>
    </member>
    <member name="M:MogreNewt.CollisionPrimitives.TreeCollision.#ctor(MogreNewt.World,Mogre.Vector3[],Mogre.IndexData,System.Boolean,System.Int32)">
      <summary>constructor </summary>
    </member>
    <member name="M:MogreNewt.CollisionPrimitives.TreeCollision.#ctor(MogreNewt.World,System.Single[],System.Int32[],System.Boolean,System.Int32,MogreNewt.CollisionPrimitives.FaceWinding)">
      <summary>constructor </summary>
    </member>
    <member name="M:MogreNewt.CollisionPrimitives.TreeCollision.#ctor(MogreNewt.World,System.Single[],System.Int32[],System.Boolean,System.Int32)">
      <summary>constructor </summary>
    </member>
    <member name="M:MogreNewt.CollisionPrimitives.TreeCollision.#ctor(MogreNewt.World,Mogre.Entity,System.Boolean,System.Int32)">
      <summary>constructor </summary>
    </member>
    <member name="M:MogreNewt.CollisionPrimitives.TreeCollision.#ctor(MogreNewt.World,Mogre.SceneNode,System.Boolean,System.Int32,MogreNewt.CollisionPrimitives.FaceWinding)">
      <summary>constructor </summary>
    </member>
    <member name="M:MogreNewt.CollisionPrimitives.TreeCollision.#ctor(MogreNewt.World,Mogre.SceneNode,System.Boolean,System.Int32)">
      <summary>constructor </summary>
    </member>
    <member name="M:MogreNewt.CollisionPrimitives.TreeCollision.#ctor(MogreNewt.World)">
      <summary>constructor </summary>
    </member>
    <member name="T:MogreNewt.CollisionPrimitives.TreeCollisionSceneParser">
      <summary>TreeCollision created by parsing a tree of SceneNodes, adding collision data of all meshes.</summary>
    </member>
    <member name="M:MogreNewt.CollisionPrimitives.TreeCollisionSceneParser.ParseScene(Mogre.SceneNode,System.Int32)">
      <summary>parse the scene. </summary>
    </member>
    <member name="M:MogreNewt.CollisionPrimitives.TreeCollisionSceneParser.ParseScene(Mogre.SceneNode,System.Boolean,System.Int32)">
      <summary>parse the scene. </summary>
    </member>
    <member name="M:MogreNewt.CollisionPrimitives.TreeCollisionSceneParser.ParseScene(Mogre.SceneNode,System.Boolean,System.Int32,MogreNewt.CollisionPrimitives.FaceWinding)">
      <summary>parse the scene. </summary>
    </member>
    <member name="T:MogreNewt.CollisionPrimitives.CompoundCollision">
      <summary>create a compound from several collision pieces. </summary>
    </member>
    <member name="M:MogreNewt.CollisionPrimitives.CompoundCollision.#ctor(MogreNewt.World,MogreNewt.Collision[],System.Int32)">
      <summary>constructor </summary>
    </member>
    <member name="T:MogreNewt.CollisionPrimitives.Pyramid">
      <summary>Pyramid primitive. </summary>
    </member>
    <member name="M:MogreNewt.CollisionPrimitives.Pyramid.#ctor(MogreNewt.World,Mogre.Vector3,System.Int32)">
      <summary>constructor </summary>
    </member>
    <member name="M:MogreNewt.CollisionPrimitives.Pyramid.#ctor(MogreNewt.World,Mogre.Vector3,Mogre.Vector3,System.Int32)">
      <summary>constructor </summary>
    </member>
    <member name="M:MogreNewt.CollisionPrimitives.Pyramid.#ctor(MogreNewt.World,Mogre.Vector3,Mogre.Quaternion,System.Int32)">
      <summary>constructor </summary>
    </member>
    <member name="M:MogreNewt.CollisionPrimitives.Pyramid.#ctor(MogreNewt.World,Mogre.Vector3,Mogre.Quaternion,Mogre.Vector3,System.Int32)">
      <summary>constructor </summary>
    </member>
    <member name="T:MogreNewt.ContactCallback">
      <summary>custom contact behavior </summary>
    </member>
    <member name="M:MogreNewt.ContactCallback.#ctor">
      <summary>constructor </summary>
    </member>
    <member name="T:MogreNewt.MaterialPair">
      <summary>define interaction between materials </summary>
    </member>
    <member name="M:MogreNewt.MaterialPair.SetDefaultSoftness(System.Single)">
      <summary>set default softness for the material pair. </summary>
    </member>
    <member name="M:MogreNewt.MaterialPair.SetDefaultElasticity(System.Single)">
      <summary>set default elasticity for the material pair. </summary>
    </member>
    <member name="M:MogreNewt.MaterialPair.SetDefaultCollidable(System.Int32)">
      <summary>set default collision for the material pair. </summary>
    </member>
    <member name="M:MogreNewt.MaterialPair.SetDefaultSurfaceThickness(System.Single)">
      <summary>set the default thickness for this material pair </summary>
    </member>
    <member name="M:MogreNewt.MaterialPair.SetDefaultFriction(System.Single,System.Single)">
      <summary>set default friction for the material pair. </summary>
    </member>
    <member name="M:MogreNewt.MaterialPair.SetContinuousCollisionMode(System.Int32)">
      <summary>set continuos collision on/off for this material pair </summary>
    </member>
    <member name="M:MogreNewt.MaterialPair.SetContactCallback(MogreNewt.ContactCallback)">
      <summary>assign a custom collision callback. </summary>
    </member>
    <member name="M:MogreNewt.MaterialPair.#ctor(MogreNewt.World,MogreNewt.MaterialID,MogreNewt.MaterialID)">
      <summary>constructor </summary>
    </member>
    <member name="T:MogreNewt.Raycast">
      <summary>general raycast </summary>
    </member>
    <member name="M:MogreNewt.Raycast.Go(MogreNewt.World,Mogre.Vector3,Mogre.Vector3)">
      <summary>performs the raycast. </summary>
    </member>
    <member name="M:MogreNewt.Raycast.UserPreFilterCallback(MogreNewt.Body)">
      <summary>user callback pre-filter function. </summary>
    </member>
    <member name="M:MogreNewt.Raycast.UserCallback(MogreNewt.Body,System.Single,Mogre.Vector3,System.Int32)">
      <summary>user callback filter function </summary>
    </member>
    <member name="M:MogreNewt.Raycast.#ctor">
      <summary>constructor </summary>
    </member>
    <member name="T:MogreNewt.BasicRaycast">
      <summary>Basic implementation of the raycast. </summary>
    </member>
    <member name="M:MogreNewt.BasicRaycast.UserCallback(MogreNewt.Body,System.Single,Mogre.Vector3,System.Int32)">
      <summary>the all-important custom callback function. </summary>
    </member>
    <member name="M:MogreNewt.BasicRaycast.GetInfoAt(System.Int32)">
      <summary>retrieve the raycast info for a specific hit. </summary>
    </member>
    <member name="M:MogreNewt.BasicRaycast.Go(MogreNewt.World,Mogre.Vector3,Mogre.Vector3)">
      <summary>perform a raycast </summary>
    </member>
    <member name="M:MogreNewt.BasicRaycast.#ctor(MogreNewt.World,Mogre.Vector3,Mogre.Vector3)">
      <summary>constructor </summary>
    </member>
    <member name="P:MogreNewt.BasicRaycast.FirstHit">
      <summary>get the closest body hit by the ray. </summary>
    </member>
    <member name="P:MogreNewt.BasicRaycast.HitCount">
      <summary>how many bodies did we hit? </summary>
    </member>
  </members>
</doc>